from typing import List, Optional, Dict, Any
from fastapi import APIRouter, Depends, Query

from app.api.dependencies import get_db, get_current_user
from app.models.user import User
from app.schemas.search_system import (
    SearchResponse,
    SavedSearchFilterSchema,
    SavedSearchFilterCreate,
    RecommendationSchema
)
from app.services.search_system_service import SearchSystemService
from sqlalchemy.ext.asyncio import AsyncSession

router = APIRouter()

@router.get("/", response_model=SearchResponse)
async def perform_search(
    q: str = Query(..., min_length=1, description="The search query text."),
    types: Optional[List[str]] = Query(None, description="A list of entity types to search within (e.g., 'user', 'drink')."),
    page: int = Query(1, gt=0),
    page_size: int = Query(20, gt=0, le=100),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Perform a comprehensive search across the platform.
    - **q**: The keyword or phrase to search for.
    - **types**: Filter results to specific types of content.
    - **page** & **page_size**: Control pagination of the results.
    """
    service = SearchSystemService(db)
    filters = {}
    if types:
        filters["types"] = types
    
    return await service.search(
        user_id=current_user.id,
        query=q,
        filters=filters,
        page=page,
        page_size=page_size
    )

@router.get("/suggest", response_model=List[str])
async def get_search_suggestions(
    q: str = Query(..., description="The partial query for which to get suggestions."),
    db: AsyncSession = Depends(get_db)
):
    """
    Get autocomplete suggestions for a search query.
    """
    service = SearchSystemService(db)
    return await service.get_query_suggestions(partial_query=q)

@router.get("/recommendations", response_model=List[RecommendationSchema])
async def get_user_recommendations(
    limit: int = Query(10, gt=0, le=50),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Get personalized recommendations for the current user.
    These are generated by background processes.
    """
    service = SearchSystemService(db)
    # This is a simplified call. A real implementation would fetch full objects.
    raw_recs = await service.get_recommendations(user_id=current_user.id, limit=limit)
    
    # In a real app, you'd have a hydrated that fetches full entity details.
    # For now, we simulate this with placeholder data.
    hydrated_recs = []
    for rec in raw_recs:
        hydrated_recs.append(RecommendationSchema(
            entity_type=rec['type'],
            entity_id=rec['id'],
            title=f"{rec['type'].capitalize()} {rec['id']}",
            description=f"A recommended {rec['type']} for you.",
            reason="Based on your activity",
            source="collaborative_filtering" # Placeholder
        ))
    return hydrated_recs

@router.post("/filters", response_model=SavedSearchFilterSchema, status_code=201)
async def create_saved_search_filter(
    filter_in: SavedSearchFilterCreate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Save a search filter configuration for later use.
    """
    service = SearchSystemService(db)
    return await service.create_saved_filter(user_id=current_user.id, filter_data=filter_in)

@router.get("/filters", response_model=List[SavedSearchFilterSchema])
async def get_saved_search_filters(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Retrieve all saved search filters for the current user.
    """
    service = SearchSystemService(db)
    return await service.get_saved_filters(user_id=current_user.id) 